# Endpoints da API de reconhecimento facial
from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, Query
from fastapi.responses import JSONResponse
from typing import Optional
import aiofiles
from loguru import logger
from datetime import datetime

# Importar servi√ßo facial com fallback inteligente
try:
    from app.services.facial_service import facial_service
    SERVICE_MODE = "real" if facial_service.facial_recognition_available else "limited"
    logger.info(f"‚úÖ Servi√ßo facial carregado em modo: {SERVICE_MODE}")
except ImportError as e:
    # Fallback para vers√£o mock se houver erro cr√≠tico
    logger.warning(f"‚ö†Ô∏è Erro ao carregar servi√ßo facial: {e}")
    try:
        from app.services.facial_service_mock import facial_service
        SERVICE_MODE = "mock"
        logger.info("üé≠ Usando servi√ßo facial MOCK como fallback")
    except ImportError as e2:
        logger.error(f"‚ùå Erro cr√≠tico: n√£o foi poss√≠vel carregar nenhum servi√ßo facial: {e2}")
        raise RuntimeError("Nenhum servi√ßo facial dispon√≠vel")
from app.config import settings
from app.models.employee import FacialVerificationResult, FacialRegistrationResult

# Criar router para endpoints de reconhecimento facial
router = APIRouter()

def validate_file(file: UploadFile) -> None:
    """
    Valida o arquivo enviado
    
    Args:
        file: Arquivo enviado via upload
        
    Raises:
        HTTPException: Se o arquivo n√£o atender aos crit√©rios
    """
    # Verificar se o arquivo existe
    if not file.filename:
        raise HTTPException(
            status_code=400,
            detail="Nenhum arquivo foi enviado"
        )
    
    # Verificar tamanho do arquivo
    if hasattr(file, 'size') and file.size and file.size > settings.MAX_FILE_SIZE:
        size_mb = settings.MAX_FILE_SIZE // (1024 * 1024)
        raise HTTPException(
            status_code=413,
            detail=f"Arquivo muito grande. Tamanho m√°ximo permitido: {size_mb}MB"
        )
    
    # Verificar extens√£o do arquivo
    if file.filename:
        extension = file.filename.split('.')[-1].lower()
        if extension not in settings.ALLOWED_EXTENSIONS:
            allowed = ', '.join(settings.ALLOWED_EXTENSIONS)
            raise HTTPException(
                status_code=400,
                detail=f"Tipo de arquivo n√£o permitido. Formatos aceitos: {allowed}"
            )

@router.post(
    "/register-employee/{employee_id}",
    response_model=FacialRegistrationResult,
    summary="Registrar foto de funcion√°rio",
    description="Registra a foto de um funcion√°rio para uso no reconhecimento facial"
)
async def register_employee_photo(
    employee_id: str,
    file: UploadFile = File(
        ..., 
        description="Arquivo de imagem contendo o rosto do funcion√°rio (JPG, PNG, WEBP)"
    )
):
    """
    Registra a foto de um funcion√°rio para reconhecimento facial
    
    **Par√¢metros:**
    - **employee_id**: ID √∫nico do funcion√°rio (string)
    - **file**: Arquivo de imagem com o rosto do funcion√°rio
    
    **Requisitos da imagem:**
    - Formato: JPG, PNG ou WEBP
    - Tamanho m√°ximo: 10MB
    - Deve conter exatamente um rosto
    - Rosto deve ser claro e bem iluminado
    - Rosto deve ocupar boa parte da imagem
    
    **Retorna:**
    - Resultado do registro com status de sucesso/falha
    - Mensagem explicativa
    - Caminhos dos arquivos salvos (se sucesso)
    """
    try:
        logger.info(f"üéØ Recebida solicita√ß√£o de registro para funcion√°rio {employee_id}")
        
        # Validar arquivo enviado
        validate_file(file)
        
        # Verificar se funcion√°rio j√° possui foto
        if facial_service.employee_has_photo(employee_id):
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {employee_id} j√° possui foto registrada")
            raise HTTPException(
                status_code=409,
                detail=f"Funcion√°rio {employee_id} j√° possui foto registrada. Use o endpoint de atualiza√ß√£o."
            )
        
        # Ler conte√∫do do arquivo
        image_bytes = await file.read()
        logger.info(f"üìÅ Arquivo lido: {len(image_bytes)} bytes")
        
        # Salvar foto e gerar encoding
        success, message = await facial_service.save_employee_photo(employee_id, image_bytes)
        
        if success:
            photo_path = f"{settings.STORAGE_PATH}/{employee_id}.jpg"
            encoding_path = f"{settings.STORAGE_PATH}/{employee_id}_encoding.json"
            
            result = FacialRegistrationResult(
                employee_id=employee_id,
                success=True,
                message=message,
                photo_path=photo_path,
                encoding_path=encoding_path
            )
            
            logger.info(f"‚úÖ Funcion√°rio {employee_id} registrado com sucesso")
            return result
        else:
            logger.error(f"‚ùå Falha no registro do funcion√°rio {employee_id}: {message}")
            raise HTTPException(
                status_code=400,
                detail=message
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no registro de funcion√°rio {employee_id}: {e}")
        raise HTTPException(
            status_code=500, 
            detail="Erro interno do servidor. Tente novamente."
        )

@router.post(
    "/verify-face/{employee_id}",
    response_model=FacialVerificationResult,
    summary="Verificar identidade facial",
    description="Verifica se o rosto na imagem pertence ao funcion√°rio especificado"
)
async def verify_employee_face(
    employee_id: str,
    file: UploadFile = File(
        ..., 
        description="Arquivo de imagem para verifica√ß√£o facial"
    )
):
    """
    Verifica se o rosto na imagem pertence ao funcion√°rio especificado
    
    **Par√¢metros:**
    - **employee_id**: ID do funcion√°rio para verificar
    - **file**: Arquivo de imagem contendo o rosto para verifica√ß√£o
    
    **Processo de verifica√ß√£o:**
    1. Valida o arquivo enviado
    2. Verifica se o funcion√°rio possui foto cadastrada
    3. Detecta rosto na imagem enviada
    4. Compara com o rosto cadastrado
    5. Retorna resultado com n√≠vel de confian√ßa
    
    **Retorna:**
    - **verified**: True se o rosto pertence ao funcion√°rio
    - **similarity**: Porcentagem de similaridade (0-100%)
    - **confidence**: N√≠vel de confian√ßa (high/medium/low)
    - **timestamp**: Momento da verifica√ß√£o
    """
    try:
        logger.info(f"üîç Recebida solicita√ß√£o de verifica√ß√£o para funcion√°rio {employee_id}")
        
        # Validar arquivo enviado
        validate_file(file)
        
        # Verificar se funcion√°rio possui foto cadastrada
        if not facial_service.employee_has_photo(employee_id):
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {employee_id} n√£o possui foto cadastrada")
            raise HTTPException(
                status_code=404,
                detail=f"Funcion√°rio {employee_id} n√£o possui foto cadastrada. Registre uma foto primeiro."
            )
        
        # Ler conte√∫do do arquivo
        image_bytes = await file.read()
        logger.info(f"üìÅ Arquivo de verifica√ß√£o lido: {len(image_bytes)} bytes")
        
        # Verificar rosto
        is_match, similarity, confidence = await facial_service.verify_face(employee_id, image_bytes)
        
        # Criar resultado da verifica√ß√£o
        result = FacialVerificationResult(
            employee_id=employee_id,
            verified=is_match,
            similarity=round(similarity * 100, 2),  # Converter para porcentagem
            confidence=confidence,
            timestamp=datetime.now()
        )
        
        # Log do resultado
        status_emoji = "‚úÖ" if is_match else "‚ùå"
        logger.info(
            f"{status_emoji} Verifica√ß√£o conclu√≠da para funcion√°rio {employee_id}: "
            f"Verificado={is_match}, Similaridade={result.similarity}%, Confian√ßa={confidence}"
        )
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico na verifica√ß√£o do funcion√°rio {employee_id}: {e}")
        raise HTTPException(
            status_code=500, 
            detail="Erro interno do servidor. Tente novamente."
        )

@router.put(
    "/update-employee/{employee_id}",
    response_model=FacialRegistrationResult,
    summary="Atualizar foto de funcion√°rio",
    description="Atualiza a foto de um funcion√°rio j√° cadastrado"
)
async def update_employee_photo(
    employee_id: str,
    file: UploadFile = File(
        ..., 
        description="Nova foto do funcion√°rio"
    )
):
    """
    Atualiza a foto de um funcion√°rio j√° cadastrado
    
    **Nota:** Remove a foto anterior e registra a nova
    """
    try:
        logger.info(f"üîÑ Recebida solicita√ß√£o de atualiza√ß√£o para funcion√°rio {employee_id}")
        
        # Validar arquivo
        validate_file(file)
        
        # Verificar se funcion√°rio existe
        if not facial_service.employee_has_photo(employee_id):
            raise HTTPException(
                status_code=404,
                detail=f"Funcion√°rio {employee_id} n√£o encontrado. Use o endpoint de registro."
            )
        
        # Remover dados antigos
        await facial_service.delete_employee_data(employee_id)
        logger.info(f"üóëÔ∏è Dados antigos removidos para funcion√°rio {employee_id}")
        
        # Ler e processar nova foto
        image_bytes = await file.read()
        success, message = await facial_service.save_employee_photo(employee_id, image_bytes)
        
        if success:
            result = FacialRegistrationResult(
                employee_id=employee_id,
                success=True,
                message=f"Foto do funcion√°rio {employee_id} atualizada com sucesso",
                photo_path=f"{settings.STORAGE_PATH}/{employee_id}.jpg",
                encoding_path=f"{settings.STORAGE_PATH}/{employee_id}_encoding.json"
            )
            
            logger.info(f"‚úÖ Funcion√°rio {employee_id} atualizado com sucesso")
            return result
        else:
            raise HTTPException(status_code=400, detail=message)
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na atualiza√ß√£o do funcion√°rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.get(
    "/employee/{employee_id}/status",
    summary="Status do funcion√°rio",
    description="Verifica se o funcion√°rio possui foto cadastrada"
)
async def get_employee_status(employee_id: str):
    """
    Verifica o status de cadastro de um funcion√°rio
    
    **Retorna:**
    - **employee_id**: ID do funcion√°rio
    - **has_photo**: Se possui foto cadastrada
    - **status**: Status do cadastro (registered/not_registered)
    """
    try:
        has_photo = facial_service.employee_has_photo(employee_id)
        
        return {
            "employee_id": employee_id,
            "has_photo": has_photo,
            "status": "registered" if has_photo else "not_registered",
            "checked_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar status do funcion√°rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.delete(
    "/employee/{employee_id}",
    summary="Remover dados do funcion√°rio",
    description="Remove todos os dados faciais de um funcion√°rio"
)
async def delete_employee_data(employee_id: str):
    """
    Remove todos os dados faciais de um funcion√°rio
    
    **Aten√ß√£o:** Esta a√ß√£o √© irrevers√≠vel!
    """
    try:
        success = await facial_service.delete_employee_data(employee_id)
        
        if success:
            return {
                "message": f"Dados do funcion√°rio {employee_id} removidos com sucesso",
                "employee_id": employee_id,
                "deleted_at": datetime.now().isoformat()
            }
        else:
            raise HTTPException(
                status_code=404,
                detail=f"Nenhum dado encontrado para o funcion√°rio {employee_id}"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover dados do funcion√°rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.get(
    "/statistics",
    summary="Estat√≠sticas do sistema",
    description="Retorna estat√≠sticas gerais do sistema de reconhecimento facial"
)
async def get_system_statistics():
    """
    Retorna estat√≠sticas do sistema de reconhecimento facial
    
    **Inclui:**
    - Total de fotos armazenadas
    - Total de encodings gerados
    - Funcion√°rios com dados completos
    - Configura√ß√µes do sistema
    """
    try:
        stats = facial_service.get_statistics()
        stats["generated_at"] = datetime.now().isoformat()
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.get(
    "/service-info",
    summary="Informa√ß√µes do servi√ßo",
    description="Retorna informa√ß√µes detalhadas sobre o modo de opera√ß√£o do servi√ßo facial"
)
async def get_service_info():
    """
    Retorna informa√ß√µes sobre o modo de opera√ß√£o do servi√ßo facial
    """
    try:
        return {
            "service_mode": SERVICE_MODE,
            "facial_recognition_available": getattr(facial_service, 'facial_recognition_available', False),
            "capabilities": {
                "real_face_detection": SERVICE_MODE == "real" and getattr(facial_service, 'facial_recognition_available', False),
                "face_encoding": SERVICE_MODE == "real" and getattr(facial_service, 'facial_recognition_available', False),
                "similarity_calculation": SERVICE_MODE == "real" and getattr(facial_service, 'facial_recognition_available', False),
                "image_storage": True,
                "basic_validation": True
            },
            "recommendations": {
                "install_dependencies": SERVICE_MODE != "real",
                "command": "pip install face-recognition opencv-python-headless numpy" if SERVICE_MODE != "real" else None
            },
            "checked_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter informa√ß√µes do servi√ßo: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.get(
    "/health",
    summary="Verifica√ß√£o de sa√∫de",
    description="Endpoint para verificar se o servi√ßo de reconhecimento facial est√° funcionando"
)
async def health_check():
    """
    Endpoint de verifica√ß√£o de sa√∫de do servi√ßo facial
    
    **Testa:**
    - Disponibilidade do servi√ßo
    - Acesso aos diret√≥rios de armazenamento
    - Configura√ß√µes b√°sicas
    """
    try:
        # Verificar se os diret√≥rios existem
        import os
        storage_ok = os.path.exists(settings.STORAGE_PATH)
        temp_ok = os.path.exists(settings.TEMP_PATH)
        
        # Status geral baseado no modo do servi√ßo
        if SERVICE_MODE == "real" and getattr(facial_service, 'facial_recognition_available', False):
            service_status = "fully_operational"
            service_emoji = "üéØ"
        elif SERVICE_MODE == "limited":
            service_status = "limited_functionality"
            service_emoji = "‚ö†Ô∏è"
        else:
            service_status = "simulation_mode"
            service_emoji = "üé≠"
        
        return {
            "status": "healthy",
            "service": "facial_recognition",
            "service_mode": SERVICE_MODE,
            "service_status": service_status,
            "service_emoji": service_emoji,
            "version": settings.APP_VERSION,
            "tolerance": settings.FACE_TOLERANCE,
            "storage_available": storage_ok,
            "temp_available": temp_ok,
            "max_file_size_mb": settings.MAX_FILE_SIZE // (1024 * 1024),
            "allowed_extensions": list(settings.ALLOWED_EXTENSIONS),
            "facial_recognition_available": getattr(facial_service, 'facial_recognition_available', False),
            "checked_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro no health check: {e}")
        raise HTTPException(status_code=500, detail="Servi√ßo indispon√≠vel") 