# Servi√ßo de reconhecimento facial SIMULADO (para testes sem depend√™ncias pesadas)
import os
from typing import Optional, Tuple
import aiofiles
from loguru import logger
import json
from datetime import datetime

from app.config import settings

class FacialService:
    """
    Servi√ßo SIMULADO para reconhecimento facial (para testes)
    
    ATEN√á√ÉO: Esta √© uma vers√£o de demonstra√ß√£o que simula o reconhecimento facial.
    Para produ√ß√£o real, use Docker com todas as depend√™ncias instaladas.
    """
    
    def __init__(self):
        self.tolerance = settings.FACE_TOLERANCE
        self.storage_path = settings.STORAGE_PATH
        self.temp_path = settings.TEMP_PATH
        
        logger.info("üé≠ Servi√ßo Facial MOCK iniciado - vers√£o de demonstra√ß√£o")
        
    async def save_employee_photo(self, employee_id: str, image_bytes: bytes) -> Tuple[bool, str]:
        """
        SIMULA salvamento de foto (salva arquivo sem processar)
        """
        try:
            logger.info(f"üì∑ [MOCK] Simulando salvamento para funcion√°rio {employee_id}")
            
            # Simular valida√ß√£o b√°sica
            if len(image_bytes) < 1000:  # Muito pequeno
                return False, "Arquivo muito pequeno. Envie uma imagem real."
            
            if len(image_bytes) > settings.MAX_FILE_SIZE:
                return False, f"Arquivo muito grande. M√°ximo: {settings.MAX_FILE_SIZE // (1024*1024)}MB"
            
            # Salvar arquivo original
            photo_path = os.path.join(self.storage_path, f"{employee_id}.jpg")
            async with aiofiles.open(photo_path, 'wb') as f:
                await f.write(image_bytes)
            
            # Simular encoding (dados fict√≠cios para demonstra√ß√£o)
            encoding_data = {
                "employee_id": employee_id,
                "encoding": [0.1, 0.2, 0.3] * 50,  # Encoding simulado
                "face_location": [50, 100, 150, 200],
                "created_at": datetime.now().isoformat(),
                "tolerance": self.tolerance,
                "version": "1.0-MOCK",
                "note": "Este √© um encoding simulado para demonstra√ß√£o"
            }
            
            encoding_path = os.path.join(self.storage_path, f"{employee_id}_encoding.json")
            async with aiofiles.open(encoding_path, 'w') as f:
                await f.write(json.dumps(encoding_data, indent=2))
            
            logger.info(f"‚úÖ [MOCK] Funcion√°rio {employee_id} 'registrado' com sucesso")
            return True, f"[MOCK] Foto do funcion√°rio {employee_id} registrada (simula√ß√£o)"
                
        except Exception as e:
            logger.error(f"‚ùå [MOCK] Erro ao salvar funcion√°rio {employee_id}: {e}")
            return False, f"Erro simulado: {str(e)}"
    
    async def verify_face(self, employee_id: str, image_bytes: bytes) -> Tuple[bool, float, str]:
        """
        SIMULA verifica√ß√£o facial (sempre retorna 85% de similaridade)
        """
        try:
            logger.info(f"üîç [MOCK] Simulando verifica√ß√£o para funcion√°rio {employee_id}")
            
            # Verificar se existe 'encoding' salvo
            encoding_path = os.path.join(self.storage_path, f"{employee_id}_encoding.json")
            
            if not os.path.exists(encoding_path):
                logger.warning(f"‚ö†Ô∏è [MOCK] Funcion√°rio {employee_id} n√£o registrado")
                return False, 0.0, "not_registered"
            
            # Simular valida√ß√£o da imagem
            if len(image_bytes) < 1000:
                return False, 0.0, "invalid_image"
            
            # SIMULA√á√ÉO: Sempre reconhece com 85% de similaridade
            is_match = True
            similarity = 0.85  # 85%
            confidence = "high"
            
            logger.info(f"üéØ [MOCK] Funcion√°rio {employee_id} 'reconhecido' com {similarity:.1%}")
            
            return is_match, similarity, confidence
            
        except Exception as e:
            logger.error(f"‚ùå [MOCK] Erro na verifica√ß√£o do funcion√°rio {employee_id}: {e}")
            return False, 0.0, "error"
    
    def employee_has_photo(self, employee_id: str) -> bool:
        """Verifica se funcion√°rio tem arquivos salvos"""
        photo_path = os.path.join(self.storage_path, f"{employee_id}.jpg")
        encoding_path = os.path.join(self.storage_path, f"{employee_id}_encoding.json")
        
        has_both = os.path.exists(photo_path) and os.path.exists(encoding_path)
        
        if has_both:
            logger.debug(f"‚úÖ [MOCK] Funcion√°rio {employee_id} possui arquivos")
        else:
            logger.debug(f"‚ùå [MOCK] Funcion√°rio {employee_id} n√£o possui arquivos")
            
        return has_both
    
    async def delete_employee_data(self, employee_id: str) -> bool:
        """Remove arquivos do funcion√°rio"""
        try:
            photo_path = os.path.join(self.storage_path, f"{employee_id}.jpg")
            encoding_path = os.path.join(self.storage_path, f"{employee_id}_encoding.json")
            
            removed_files = []
            
            if os.path.exists(photo_path):
                os.remove(photo_path)
                removed_files.append("foto")
            
            if os.path.exists(encoding_path):
                os.remove(encoding_path)
                removed_files.append("encoding")
            
            if removed_files:
                logger.info(f"üóëÔ∏è [MOCK] Arquivos removidos para funcion√°rio {employee_id}: {', '.join(removed_files)}")
                return True
            else:
                logger.info(f"‚ÑπÔ∏è [MOCK] Nenhum arquivo encontrado para funcion√°rio {employee_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [MOCK] Erro ao remover dados do funcion√°rio {employee_id}: {e}")
            return False
    
    def get_statistics(self) -> dict:
        """Retorna estat√≠sticas do sistema"""
        try:
            files = os.listdir(self.storage_path) if os.path.exists(self.storage_path) else []
            
            photos = len([f for f in files if f.endswith('.jpg')])
            encodings = len([f for f in files if f.endswith('_encoding.json')])
            
            complete_employees = 0
            for file in files:
                if file.endswith('.jpg'):
                    employee_id = file.replace('.jpg', '')
                    if self.employee_has_photo(employee_id):
                        complete_employees += 1
            
            return {
                "mode": "MOCK/DEMO",
                "note": "Esta √© uma vers√£o de demonstra√ß√£o sem reconhecimento facial real",
                "total_photos": photos,
                "total_encodings": encodings,
                "complete_employees": complete_employees,
                "storage_path": self.storage_path,
                "tolerance": self.tolerance,
                "real_facial_recognition": False
            }
            
        except Exception as e:
            logger.error(f"‚ùå [MOCK] Erro ao obter estat√≠sticas: {e}")
            return {
                "error": str(e),
                "mode": "MOCK/DEMO"
            }

# Inst√¢ncia global do servi√ßo facial MOCK
facial_service = FacialService() 