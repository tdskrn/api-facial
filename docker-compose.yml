# Docker Compose para API de Reconhecimento Facial
version: '3.8'

services:
  # Serviço principal da API
  facial-api:
    build: 
      context: .
      target: production  # Use 'development' para dev
    container_name: facial-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Configurações da aplicação
      - DEBUG=false
      - APP_NAME=API Reconhecimento Facial
      - HOST=0.0.0.0
      - PORT=8000
      
      # Reconhecimento facial
      - FACE_TOLERANCE=0.6
      - MAX_FILE_SIZE=10485760
      - ALLOWED_EXTENSIONS=jpg,jpeg,png,webp
      
      # Segurança
      - SECRET_KEY=${SECRET_KEY:-sua-chave-secreta-super-forte-aqui}
      
      # Base de dados (SQLite para simplicidade inicial)
      - DATABASE_URL=sqlite:///./data/facial_api.db
      
      # Logs
      - LOG_LEVEL=INFO
    
    volumes:
      # Persistir dados importantes
      - ./app/storage:/app/app/storage
      - ./logs:/app/logs
      - ./data:/app/data
    
    networks:
      - facial-network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx como proxy reverso (recomendado para produção)
  nginx:
    image: nginx:alpine
    container_name: facial-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Para certificados SSL
    depends_on:
      facial-api:
        condition: service_healthy
    networks:
      - facial-network

  # Redis para cache (opcional, para otimização futura)
  redis:
    image: redis:7-alpine
    container_name: facial-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-minhasenhaforte}
    volumes:
      - redis-data:/data
    networks:
      - facial-network
    # Não expor porta externamente por segurança
    ports:
      - "127.0.0.1:6379:6379"

  # PostgreSQL para dados estruturados (alternativa ao SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: facial-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-facial_api}
      POSTGRES_USER: ${POSTGRES_USER:-facial_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-minhasenhaforte}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - facial-network
    # Não expor porta externamente por segurança
    ports:
      - "127.0.0.1:5432:5432"

  # Monitoring com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: facial-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - facial-network
    ports:
      - "127.0.0.1:9090:9090"

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: facial-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - facial-network
    ports:
      - "127.0.0.1:3000:3000"

# Rede para comunicação entre serviços
networks:
  facial-network:
    driver: bridge

# Volumes para persistência de dados
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

##############################################################################
# Para desenvolvimento rápido, use apenas:
# docker-compose up facial-api
#
# Para produção completa:
# docker-compose up
############################################################################## 