#!/usr/bin/env python3
"""
üß™ Script de Teste para Integra√ß√£o com Laravel
Testa a API Flask que busca fotos via API Laravel
"""

import requests
import json
import base64
import sys
import os
from io import BytesIO
from PIL import Image, ImageDraw

# Configura√ß√µes
API_URL = "http://localhost:8000"
EMPLOYEE_ID = "123"

def create_test_image():
    """Cria uma imagem de teste simples"""
    # Criar uma imagem de teste 200x200 com um "rosto" simples
    img = Image.new('RGB', (200, 200), color='lightblue')
    draw = ImageDraw.Draw(img)
    
    # Desenhar um rosto simples
    # Cabe√ßa (c√≠rculo)
    draw.ellipse([50, 50, 150, 150], fill='peachpuff', outline='black', width=2)
    
    # Olhos
    draw.ellipse([70, 80, 90, 100], fill='black')
    draw.ellipse([110, 80, 130, 100], fill='black')
    
    # Nariz
    draw.polygon([(100, 100), (95, 110), (105, 110)], fill='pink')
    
    # Boca
    draw.arc([80, 115, 120, 135], start=0, end=180, fill='red', width=3)
    
    # Converter para base64
    buffer = BytesIO()
    img.save(buffer, format='JPEG')
    img_str = base64.b64encode(buffer.getvalue()).decode()
    
    return f"data:image/jpeg;base64,{img_str}"

def test_health():
    """Testa o endpoint de health check"""
    print("üîç Testando health check...")
    try:
        response = requests.get(f"{API_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Health check OK")
            data = response.json()
            print(f"   Status: {data.get('status')}")
            print(f"   API: {data.get('api')}")
            
            # Verificar configura√ß√£o Laravel
            config = data.get('configuration', {})
            laravel_api = config.get('laravel_api', 'N/A')
            authenticated = config.get('authenticated', False)
            
            print(f"   Laravel API: {laravel_api}")
            print(f"   Autenticado: {'‚úÖ' if authenticated else '‚ùå'}")
            
            if not authenticated:
                print("   ‚ö†Ô∏è ATEN√á√ÉO: Token Laravel n√£o configurado!")
                
        else:
            print(f"‚ùå Health check falhou: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no health check: {e}")
        return False
    
    return True

def test_root():
    """Testa o endpoint raiz"""
    print("üè† Testando endpoint raiz...")
    try:
        response = requests.get(f"{API_URL}/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Endpoint raiz OK")
            data = response.json()
            print(f"   Mensagem: {data.get('message')}")
            
            # Verificar integra√ß√£o Laravel
            laravel_info = data.get('laravel_integration', {})
            print(f"   Laravel API Base: {laravel_info.get('api_base')}")
            print(f"   Token Configurado: {'‚úÖ' if laravel_info.get('authenticated') else '‚ùå'}")
            
        else:
            print(f"‚ùå Endpoint raiz falhou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no endpoint raiz: {e}")

def test_validate_with_laravel():
    """Testa o endpoint de valida√ß√£o que busca foto via Laravel"""
    print("üì∑ Testando valida√ß√£o com integra√ß√£o Laravel...")
    
    # Criar imagem de teste
    test_image_b64 = create_test_image()
    
    payload = {
        "employee_id": EMPLOYEE_ID,
        "image_base64": test_image_b64
    }
    
    try:
        print(f"   Enviando requisi√ß√£o para funcion√°rio ID: {EMPLOYEE_ID}")
        
        response = requests.post(
            f"{API_URL}/api/validate",
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   Resposta: {json.dumps(data, indent=2)}")
            
            if data.get('success'):
                print("‚úÖ Valida√ß√£o processada com sucesso")
                if 'match' in data:
                    match_status = "MATCH" if data['match'] else "NO MATCH"
                    confidence = data.get('confidence', 0)
                    print(f"   Resultado: {match_status} (confian√ßa: {confidence:.2f})")
            else:
                reason = data.get('reason', 'Raz√£o n√£o especificada')
                print(f"‚ö†Ô∏è Valida√ß√£o falhou: {reason}")
                
                # Detectar problemas espec√≠ficos
                if "n√£o foi poss√≠vel obter" in reason.lower():
                    print("   üí° Poss√≠veis causas:")
                    print("      - Funcion√°rio n√£o existe na API Laravel")
                    print("      - Token de autentica√ß√£o inv√°lido")
                    print("      - API Laravel n√£o est√° respondendo")
                    print("      - URL da API Laravel incorreta")
                elif "n√£o foi poss√≠vel processar" in reason.lower():
                    print("   üí° Problema na imagem capturada")
                
        elif response.status_code == 500:
            print("‚ùå Erro interno do servidor")
            try:
                error_data = response.json()
                print(f"   Erro: {error_data.get('error', 'Erro desconhecido')}")
                details = error_data.get('details')
                if details:
                    print(f"   Detalhes: {details}")
            except:
                print(f"   Resposta: {response.text}")
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   Erro: {error_data.get('error', 'Erro desconhecido')}")
            except:
                print(f"   Resposta: {response.text}")
                
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")

def test_laravel_api_directly():
    """Testa se conseguimos acessar a API Laravel diretamente"""
    print("üîç Testando acesso direto √† API Laravel...")
    
    # Tentar descobrir as configura√ß√µes
    try:
        response = requests.get(f"{API_URL}/", timeout=10)
        if response.status_code == 200:
            data = response.json()
            laravel_info = data.get('laravel_integration', {})
            laravel_base = laravel_info.get('api_base')
            authenticated = laravel_info.get('authenticated')
            
            if not laravel_base:
                print("‚ùå Laravel API Base n√£o configurado")
                return
                
            print(f"   Laravel API: {laravel_base}")
            print(f"   Token: {'Configurado' if authenticated else 'N√£o configurado'}")
            
            # Testar endpoint Laravel
            laravel_url = f"{laravel_base}/api/employee/{EMPLOYEE_ID}/photo"
            print(f"   Testando: {laravel_url}")
            
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            
            # Nota: n√£o podemos testar com token real aqui pois n√£o temos acesso
            # Mas podemos testar se o endpoint responde
            
            try:
                laravel_response = requests.get(laravel_url, headers=headers, timeout=10)
                print(f"   Status Laravel: {laravel_response.status_code}")
                
                if laravel_response.status_code == 401:
                    print("   ‚úÖ API Laravel respondeu (mas precisa de autentica√ß√£o)")
                elif laravel_response.status_code == 404:
                    print("   ‚ö†Ô∏è Funcion√°rio n√£o encontrado ou endpoint n√£o existe")
                elif laravel_response.status_code == 200:
                    print("   ‚úÖ API Laravel funcionando!")
                    try:
                        laravel_data = laravel_response.json()
                        print(f"   Dados: {json.dumps(laravel_data, indent=2)}")
                    except:
                        pass
                else:
                    print(f"   ‚ùì Status inesperado: {laravel_response.status_code}")
                    
            except requests.exceptions.ConnectionError:
                print("   ‚ùå N√£o foi poss√≠vel conectar √† API Laravel")
                print("   üí° Verifique se a URL est√° correta e o servidor est√° funcionando")
            except requests.exceptions.Timeout:
                print("   ‚ùå Timeout ao conectar √† API Laravel")
            except Exception as e:
                print(f"   ‚ùå Erro ao testar API Laravel: {e}")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter configura√ß√µes: {e}")

def show_configuration_help():
    """Mostra ajuda sobre configura√ß√£o"""
    print("\nüìã CONFIGURA√á√ÉO NECESS√ÅRIA")
    print("=" * 50)
    print()
    print("Para usar esta API, voc√™ precisa configurar:")
    print()
    print("1. No arquivo .env da API Flask:")
    print("   LARAVEL_API_BASE=https://meusite-laravel.com.br")
    print("   LARAVEL_API_TOKEN=1|abc123...")
    print()
    print("2. No seu Laravel, crie o endpoint:")
    print("   GET /api/employee/{id}/photo")
    print("   (veja laravel-api-example.php)")
    print()
    print("3. No Laravel, gere um token Sanctum:")
    print("   $token = $user->createToken('facial-api')->plainTextToken;")
    print()
    print("4. O endpoint Laravel deve retornar:")
    print("   {")
    print('     "success": true,')
    print('     "employee_id": "123",')
    print('     "photo_url": "https://site.com/storage/employees/123.jpg"')
    print("   }")

def main():
    print("üß™ Teste de Integra√ß√£o Flask + Laravel")
    print("=" * 50)
    
    # Verificar se a API est√° rodando
    if not test_health():
        print("\n‚ùå API Flask n√£o est√° respondendo. Certifique-se de que est√° rodando:")
        print("   python3 app.py")
        print("   ou")
        print("   gunicorn --config gunicorn.conf.py app:app")
        sys.exit(1)
    
    print("\nüìã Executando testes...")
    
    # Executar todos os testes
    test_root()
    print()
    
    test_laravel_api_directly()
    print()
    
    test_validate_with_laravel()
    print()
    
    show_configuration_help()
    print()
    
    print("‚úÖ Testes conclu√≠dos!")

if __name__ == "__main__":
    main()